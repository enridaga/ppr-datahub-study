<?php 
// Parameters: width, height, trace
// 
?>
<div id="canvas-svg"></div>
<style>
  #canvas-svg {
  	border: 2px solid #CCCCCC;
    width: <?php print $this->get('width', 450); ?>px;
  }

  .node rect {
    cursor: pointer;
    fill-opacity: .1;
    shape-rendering: crispEdges;
  }
  .node rect:hover{
  	fill-opacity: .9;
  }
  .node[selected] rect{
  	fill-opacity: 1;
  }
  .node text {
    pointer-events: none;
    text-shadow: 0 1px 0 #fff;
  }

  .link {
    fill: none;
    stroke: #000;
    stroke-opacity: .3;
    cursor:pointer;
  }
  .link.propagates{
    stroke: rgb(0,255,0);
  }
  .link.blocks{
    stroke: rgb(255,0,0);
  }
  .link[selected] {
    stroke-opacity: 1;
  }

  .link:hover {
    stroke-opacity: 1;
  }
  
  svg defs #arrow {
  	fill-opacity: .3;
  } 

  div table tr.highlight.propagates td{
  	background-color: rgba(0,255,0,.6);
  }
  
  div table tr.highlight.blocks td{
  	background-color: rgba(255,0,0,.6);
  }
  div table td.highlight {
  	background-color: #999999 ;
  }
  table tr.hover.propagates td {
  	background-color: rgba(0,255,0,.2);
  }
  table tr.hover.blocks td {
    background-color: rgba(255,0,0,.2);
  }
  table td.hover {
  	background-color: #999999 ;
  }
</style>
<script>
var data = <?php print json_encode($this->get('trace', array()));?>;

var renderDiagram = function (data){
var relcount = data.relcount;
var margin = {top: 8, right: 30, bottom: 8, left: 5},
    width = (relcount?relcount*30:0) + <?php print $this->get('height', 500); ?> - margin.left - margin.right,
    height = <?php print $this->get('width', 450); ?> - margin.top - margin.bottom;

var formatNumber = d3.format(",.0f"),
    format = function(d) { return formatNumber(d) + ""; },
    color = d3.scaleOrdinal(d3.schemeCategory20);

var svg = d3.select("#canvas-svg").append("svg")
    .attr("width", height + margin.top + margin.bottom)
    .attr("height", width + margin.left + margin.right)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ") rotate(0)");

var sankey = d3.sankey()
    .nodeWidth(20)
    .nodePadding(8)
    .size([width, height]);

var path = sankey.link();

var energy = data;

sankey
    .nodes(energy.nodes)
    .links(energy.links)
    .layout(132);

var link = svg.append("g")
    .attr("class", "link-group")
    .attr("transform", "translate(" + height + ", " + 0 + ") rotate(90)")
    .selectAll(".link")
    .data(energy.links)
    .enter().append("path")
    .attr("d", path)
    .style("stroke-width", function(d) { return d.value*5; })
    .attr("class", function(d) { 
//         return (d.propagates)?"link propagates":"link blocks" ;
        return "link" ; 
     })
    .sort(function(a, b) { return b.dy - a.dy; });
console.log(link);
svg.append("defs").append("marker")
	.attr("id","arrow")	
	.attr("viewBox","0 -5 10 10")
	.attr("refX", 5)
	.attr("refY", 0)
	.attr("markerWidth", 2.5)
	.attr("markerHeight", 2.5)
	.attr("orient","auto")
.append("path")
	.attr("d", "M0,-5L10,0L0,5")
	.attr("class","arrowHead");

link.attr("marker-end", "url(#arrow)");
link.attr("id",function(d){return (d.source.name + '--' + d.target.name)});
link.append("title")
    .text(function(d) { return d.source.name + " → " + d.name + " → " + d.target.name;}); // + "\n" + format(d.value); 

// Link to table
link.on("mouseover", function(d){
	$('tr[data-link="' + (d.source.name + '--' + d.target.name) + '"]').addClass('hover');
}).on("mouseout", function(d){
	if(!$(this).attr("selected")){
		$('tr[data-link="' + (d.source.name + '--' + d.target.name) + '"]').removeClass('hover');
	}
}).on("click", function(d){
	linkfocus($(this).attr("id"));
});

var node = svg
    .append("g")
    .attr("transform", "translate(" + height + ", " + 0 + ") rotate(90)")
    .selectAll(".node")
    .data(energy.nodes)
    .enter().append("g")
    .attr("class", "node")
    .attr("id", function(d){
        return d.name;
     })
    .attr("transform", function(d) { return "translate(" + (d.x) + "," + (d.y) + ")"; })
    .call(d3.drag()
    .subject(function(d) { return d; })
    .on("start", function() { this.parentNode.appendChild(this); })
    .on("drag", dragmove))
    .on("mouseover", function(d){
		$('td[data-source="' + (d.name) + '"]').addClass('hover');
		$('td[data-target="' + (d.name) + '"]').addClass('hover');
	}).on("mouseout", function(d){
		if(!$(this).attr("selected")){
			$('td[data-source="' + (d.name) + '"]').removeClass('hover');
			$('td[data-target="' + (d.name) + '"]').removeClass('hover');
		}
	}).on("click", function(d){
		nodefocus(d.name);
});

node.append("rect")
    .attr("height", function(d) { return d.dy; })
    .attr("width", sankey.nodeWidth() )
    .style("fill", function(d) { return d.color = color(d.name.replace(/ .*/, "")); })
    .style("stroke", function(d) { return d3.rgb(d.color).darker(2); })
    .append("title")
    .text(function(d) { return d.name; }); 

node.append("text")
    .attr("x", 0) 
    .attr("y", function(d) { return d.dx+10; })
    .attr("dy", ".35em")
    .attr("text-anchor", "end")
    .attr("transform", "rotate(-90)")
    .text(function(d) { return d.name; })
    ;

function dragmove(d) {
  d3.select(this).attr("transform", "translate(" + d.x + "," + (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ")");
  sankey.relayout();
  link.attr("d", path);
}
	
}

$(document).ready(function(){
	renderDiagram(data);
});


if (!String.prototype.trim) {
    (function() {
        // Make sure we trim BOM and NBSP
        var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
        String.prototype.trim = function() {
            return this.replace(rtrim, '');
        };
    })();
}

function nodefocus(name){
	var node = $("svg #"+name);
	var set = !node.attr("selected");
	// Deselect all
	$("svg [selected]").removeAttr("selected");
	$('td[data-source]').removeClass('highlight').removeClass('hover');
	$('td[data-target]').removeClass('highlight').removeClass('hover');
	$('tr[data-link]').removeClass('highlight').removeClass('hover');
	node.attr("selected", set);
	if(set){
		$('td[data-source="' + (name) + '"]').addClass('highlight');
		$('td[data-target="' + (name) + '"]').addClass('highlight');
	}
}
function linkfocus(linkid){
	var link = $("#"+linkid);
	
	var set = !link.attr("selected");
	// Deselect all
	$("svg [selected]").removeAttr("selected");
	$('tr[data-link]').removeClass('highlight').removeClass('hover');
	$('td[data-source]').removeClass('highlight').removeClass('hover');
	$('td[data-target]').removeClass('highlight').removeClass('hover');
	link.attr("selected", set);
	if(set){
		$('tr[data-link="' + (linkid) + '"]').addClass('highlight');
	}	
}
</script>